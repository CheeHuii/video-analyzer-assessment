syntax = "proto3";

package videoanalyzer.chat;

import "google/protobuf/timestamp.proto";

message Message {
  string id = 1;                // uuid
  string conversation_id = 2;   // allow multiple chats
  string sender = 3;            // "user" or "system" or "agent"
  string text = 4;
  int64 created_at = 5;         // unix epoch ms
  double confidence = 6;        // optional, 0..1
  bool needs_clarification = 7; // human-in-loop flag
  repeated string attachments = 8; // paths or IDs
  string metadata_json = 9;     // optional extra
}

message SendMessageRequest {
  string conversation_id = 1;
  Message message = 2;
  bool stream_responses = 3; // if true, server will also stream agent responses
}

message SendMessageResponse {
  Message stored_message = 1;
}

message GetHistoryRequest {
  string conversation_id = 1;
  int32 limit = 2;
  int32 offset = 3;
}

message GetHistoryResponse {
  repeated Message messages = 1;
}

message StreamResponse {
  // server-streaming element; could be partial text or completed message
  oneof payload {
    string partial_text = 1; // partial token/string while model generates
    Message message = 2;     // final stored message
  }
  bool done = 3; // true when stream finished
}

service ChatService {
  rpc SendMessage (SendMessageRequest) returns (SendMessageResponse);
  rpc GetHistory (GetHistoryRequest) returns (GetHistoryResponse);
  rpc StreamResponses (SendMessageRequest) returns (stream StreamResponse);
}
