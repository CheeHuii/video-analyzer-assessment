// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.8.0
//   protoc               v6.33.0
// source: transcription.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  type ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientReadableStream,
  type ClientUnaryCall,
  type handleServerStreamingCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  type Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import { TaskRequest, TaskStatus, taskStatusFromJSON, taskStatusToJSON } from "./common";
import { Timestamp } from "./google/protobuf/timestamp";

export const protobufPackage = "genai.transcription";

export interface TaskTranscribeRequest {
  task?: TaskRequest | undefined;
}

export interface StreamTranscribeRequest {
  task?:
    | TaskRequest
    | undefined;
  /** optional: when sending raw audio frames in chunks, use bytes payload */
  audioChunk: Uint8Array;
  timestamp?: Date | undefined;
}

export interface TranscriptionChunk {
  taskId: string;
  text: string;
  confidence: number;
  isFinal: boolean;
  startTime?: Date | undefined;
  endTime?: Date | undefined;
}

export interface TranscriptionResult {
  taskId: string;
  segments: TranscriptionChunk[];
  /** file path to detailed transcript JSON */
  transcriptJsonPath: string;
  status: TaskStatus;
  error: string;
}

function createBaseTaskTranscribeRequest(): TaskTranscribeRequest {
  return { task: undefined };
}

export const TaskTranscribeRequest: MessageFns<TaskTranscribeRequest> = {
  encode(message: TaskTranscribeRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.task !== undefined) {
      TaskRequest.encode(message.task, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TaskTranscribeRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTaskTranscribeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.task = TaskRequest.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TaskTranscribeRequest {
    return { task: isSet(object.task) ? TaskRequest.fromJSON(object.task) : undefined };
  },

  toJSON(message: TaskTranscribeRequest): unknown {
    const obj: any = {};
    if (message.task !== undefined) {
      obj.task = TaskRequest.toJSON(message.task);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TaskTranscribeRequest>, I>>(base?: I): TaskTranscribeRequest {
    return TaskTranscribeRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TaskTranscribeRequest>, I>>(object: I): TaskTranscribeRequest {
    const message = createBaseTaskTranscribeRequest();
    message.task = (object.task !== undefined && object.task !== null)
      ? TaskRequest.fromPartial(object.task)
      : undefined;
    return message;
  },
};

function createBaseStreamTranscribeRequest(): StreamTranscribeRequest {
  return { task: undefined, audioChunk: new Uint8Array(0), timestamp: undefined };
}

export const StreamTranscribeRequest: MessageFns<StreamTranscribeRequest> = {
  encode(message: StreamTranscribeRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.task !== undefined) {
      TaskRequest.encode(message.task, writer.uint32(10).fork()).join();
    }
    if (message.audioChunk.length !== 0) {
      writer.uint32(18).bytes(message.audioChunk);
    }
    if (message.timestamp !== undefined) {
      Timestamp.encode(toTimestamp(message.timestamp), writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StreamTranscribeRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStreamTranscribeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.task = TaskRequest.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.audioChunk = reader.bytes();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.timestamp = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StreamTranscribeRequest {
    return {
      task: isSet(object.task) ? TaskRequest.fromJSON(object.task) : undefined,
      audioChunk: isSet(object.audioChunk) ? bytesFromBase64(object.audioChunk) : new Uint8Array(0),
      timestamp: isSet(object.timestamp) ? fromJsonTimestamp(object.timestamp) : undefined,
    };
  },

  toJSON(message: StreamTranscribeRequest): unknown {
    const obj: any = {};
    if (message.task !== undefined) {
      obj.task = TaskRequest.toJSON(message.task);
    }
    if (message.audioChunk.length !== 0) {
      obj.audioChunk = base64FromBytes(message.audioChunk);
    }
    if (message.timestamp !== undefined) {
      obj.timestamp = message.timestamp.toISOString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StreamTranscribeRequest>, I>>(base?: I): StreamTranscribeRequest {
    return StreamTranscribeRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StreamTranscribeRequest>, I>>(object: I): StreamTranscribeRequest {
    const message = createBaseStreamTranscribeRequest();
    message.task = (object.task !== undefined && object.task !== null)
      ? TaskRequest.fromPartial(object.task)
      : undefined;
    message.audioChunk = object.audioChunk ?? new Uint8Array(0);
    message.timestamp = object.timestamp ?? undefined;
    return message;
  },
};

function createBaseTranscriptionChunk(): TranscriptionChunk {
  return { taskId: "", text: "", confidence: 0, isFinal: false, startTime: undefined, endTime: undefined };
}

export const TranscriptionChunk: MessageFns<TranscriptionChunk> = {
  encode(message: TranscriptionChunk, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.taskId !== "") {
      writer.uint32(10).string(message.taskId);
    }
    if (message.text !== "") {
      writer.uint32(18).string(message.text);
    }
    if (message.confidence !== 0) {
      writer.uint32(25).double(message.confidence);
    }
    if (message.isFinal !== false) {
      writer.uint32(32).bool(message.isFinal);
    }
    if (message.startTime !== undefined) {
      Timestamp.encode(toTimestamp(message.startTime), writer.uint32(42).fork()).join();
    }
    if (message.endTime !== undefined) {
      Timestamp.encode(toTimestamp(message.endTime), writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TranscriptionChunk {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTranscriptionChunk();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.taskId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.text = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 25) {
            break;
          }

          message.confidence = reader.double();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.isFinal = reader.bool();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.startTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.endTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TranscriptionChunk {
    return {
      taskId: isSet(object.taskId) ? globalThis.String(object.taskId) : "",
      text: isSet(object.text) ? globalThis.String(object.text) : "",
      confidence: isSet(object.confidence) ? globalThis.Number(object.confidence) : 0,
      isFinal: isSet(object.isFinal) ? globalThis.Boolean(object.isFinal) : false,
      startTime: isSet(object.startTime) ? fromJsonTimestamp(object.startTime) : undefined,
      endTime: isSet(object.endTime) ? fromJsonTimestamp(object.endTime) : undefined,
    };
  },

  toJSON(message: TranscriptionChunk): unknown {
    const obj: any = {};
    if (message.taskId !== "") {
      obj.taskId = message.taskId;
    }
    if (message.text !== "") {
      obj.text = message.text;
    }
    if (message.confidence !== 0) {
      obj.confidence = message.confidence;
    }
    if (message.isFinal !== false) {
      obj.isFinal = message.isFinal;
    }
    if (message.startTime !== undefined) {
      obj.startTime = message.startTime.toISOString();
    }
    if (message.endTime !== undefined) {
      obj.endTime = message.endTime.toISOString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TranscriptionChunk>, I>>(base?: I): TranscriptionChunk {
    return TranscriptionChunk.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TranscriptionChunk>, I>>(object: I): TranscriptionChunk {
    const message = createBaseTranscriptionChunk();
    message.taskId = object.taskId ?? "";
    message.text = object.text ?? "";
    message.confidence = object.confidence ?? 0;
    message.isFinal = object.isFinal ?? false;
    message.startTime = object.startTime ?? undefined;
    message.endTime = object.endTime ?? undefined;
    return message;
  },
};

function createBaseTranscriptionResult(): TranscriptionResult {
  return { taskId: "", segments: [], transcriptJsonPath: "", status: 0, error: "" };
}

export const TranscriptionResult: MessageFns<TranscriptionResult> = {
  encode(message: TranscriptionResult, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.taskId !== "") {
      writer.uint32(10).string(message.taskId);
    }
    for (const v of message.segments) {
      TranscriptionChunk.encode(v!, writer.uint32(18).fork()).join();
    }
    if (message.transcriptJsonPath !== "") {
      writer.uint32(26).string(message.transcriptJsonPath);
    }
    if (message.status !== 0) {
      writer.uint32(32).int32(message.status);
    }
    if (message.error !== "") {
      writer.uint32(42).string(message.error);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TranscriptionResult {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTranscriptionResult();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.taskId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.segments.push(TranscriptionChunk.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.transcriptJsonPath = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.error = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TranscriptionResult {
    return {
      taskId: isSet(object.taskId) ? globalThis.String(object.taskId) : "",
      segments: globalThis.Array.isArray(object?.segments)
        ? object.segments.map((e: any) => TranscriptionChunk.fromJSON(e))
        : [],
      transcriptJsonPath: isSet(object.transcriptJsonPath) ? globalThis.String(object.transcriptJsonPath) : "",
      status: isSet(object.status) ? taskStatusFromJSON(object.status) : 0,
      error: isSet(object.error) ? globalThis.String(object.error) : "",
    };
  },

  toJSON(message: TranscriptionResult): unknown {
    const obj: any = {};
    if (message.taskId !== "") {
      obj.taskId = message.taskId;
    }
    if (message.segments?.length) {
      obj.segments = message.segments.map((e) => TranscriptionChunk.toJSON(e));
    }
    if (message.transcriptJsonPath !== "") {
      obj.transcriptJsonPath = message.transcriptJsonPath;
    }
    if (message.status !== 0) {
      obj.status = taskStatusToJSON(message.status);
    }
    if (message.error !== "") {
      obj.error = message.error;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TranscriptionResult>, I>>(base?: I): TranscriptionResult {
    return TranscriptionResult.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TranscriptionResult>, I>>(object: I): TranscriptionResult {
    const message = createBaseTranscriptionResult();
    message.taskId = object.taskId ?? "";
    message.segments = object.segments?.map((e) => TranscriptionChunk.fromPartial(e)) || [];
    message.transcriptJsonPath = object.transcriptJsonPath ?? "";
    message.status = object.status ?? 0;
    message.error = object.error ?? "";
    return message;
  },
};

export type TranscriptionAgentService = typeof TranscriptionAgentService;
export const TranscriptionAgentService = {
  /** One-shot transcription (blocking until done) */
  transcribe: {
    path: "/genai.transcription.TranscriptionAgent/Transcribe",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: TaskTranscribeRequest): Buffer =>
      Buffer.from(TaskTranscribeRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): TaskTranscribeRequest => TaskTranscribeRequest.decode(value),
    responseSerialize: (value: TranscriptionResult): Buffer => Buffer.from(TranscriptionResult.encode(value).finish()),
    responseDeserialize: (value: Buffer): TranscriptionResult => TranscriptionResult.decode(value),
  },
  /** Streaming transcription: client sends audio frames or a single TaskRequest and receives a stream of partial results */
  streamTranscribe: {
    path: "/genai.transcription.TranscriptionAgent/StreamTranscribe",
    requestStream: false,
    responseStream: true,
    requestSerialize: (value: StreamTranscribeRequest): Buffer =>
      Buffer.from(StreamTranscribeRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): StreamTranscribeRequest => StreamTranscribeRequest.decode(value),
    responseSerialize: (value: TranscriptionChunk): Buffer => Buffer.from(TranscriptionChunk.encode(value).finish()),
    responseDeserialize: (value: Buffer): TranscriptionChunk => TranscriptionChunk.decode(value),
  },
} as const;

export interface TranscriptionAgentServer extends UntypedServiceImplementation {
  /** One-shot transcription (blocking until done) */
  transcribe: handleUnaryCall<TaskTranscribeRequest, TranscriptionResult>;
  /** Streaming transcription: client sends audio frames or a single TaskRequest and receives a stream of partial results */
  streamTranscribe: handleServerStreamingCall<StreamTranscribeRequest, TranscriptionChunk>;
}

export interface TranscriptionAgentClient extends Client {
  /** One-shot transcription (blocking until done) */
  transcribe(
    request: TaskTranscribeRequest,
    callback: (error: ServiceError | null, response: TranscriptionResult) => void,
  ): ClientUnaryCall;
  transcribe(
    request: TaskTranscribeRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: TranscriptionResult) => void,
  ): ClientUnaryCall;
  transcribe(
    request: TaskTranscribeRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: TranscriptionResult) => void,
  ): ClientUnaryCall;
  /** Streaming transcription: client sends audio frames or a single TaskRequest and receives a stream of partial results */
  streamTranscribe(
    request: StreamTranscribeRequest,
    options?: Partial<CallOptions>,
  ): ClientReadableStream<TranscriptionChunk>;
  streamTranscribe(
    request: StreamTranscribeRequest,
    metadata?: Metadata,
    options?: Partial<CallOptions>,
  ): ClientReadableStream<TranscriptionChunk>;
}

export const TranscriptionAgentClient = makeGenericClientConstructor(
  TranscriptionAgentService,
  "genai.transcription.TranscriptionAgent",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): TranscriptionAgentClient;
  service: typeof TranscriptionAgentService;
  serviceName: string;
};

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
