// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.8.0
//   protoc               v6.33.0
// source: vision.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  type ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientReadableStream,
  type ClientUnaryCall,
  type handleServerStreamingCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  type Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import { TaskRequest, TaskStatus, taskStatusFromJSON, taskStatusToJSON } from "./common";
import { Timestamp } from "./google/protobuf/timestamp";

export const protobufPackage = "genai.vision";

export interface VideoAnalysisRequest {
  task?:
    | TaskRequest
    | undefined;
  /** sample one frame per N ms */
  frameSampleRateMs: number;
  parametersJson: string;
}

export interface DetectedObject {
  label: string;
  confidence: number;
  xmin: number;
  ymin: number;
  xmax: number;
  ymax: number;
  timestamp?: Date | undefined;
}

export interface OCRText {
  text: string;
  confidence: number;
  timestamp?: Date | undefined;
  language: string;
}

export interface GraphCrop {
  imagePath: string;
  timestamp?:
    | Date
    | undefined;
  /** e.g., "bar", "line", "scatter" or "unknown" */
  graphType: string;
}

export interface VisionChunk {
  taskId: string;
  objects: DetectedObject[];
  ocr: OCRText[];
  graphs: GraphCrop[];
}

export interface VisionResult {
  taskId: string;
  objects: DetectedObject[];
  ocr: OCRText[];
  graphs: GraphCrop[];
  resultJsonPath: string;
  status: TaskStatus;
  error: string;
}

export interface GraphDetectionResult {
  taskId: string;
  crops: GraphCrop[];
  resultJsonPath: string;
}

function createBaseVideoAnalysisRequest(): VideoAnalysisRequest {
  return { task: undefined, frameSampleRateMs: 0, parametersJson: "" };
}

export const VideoAnalysisRequest: MessageFns<VideoAnalysisRequest> = {
  encode(message: VideoAnalysisRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.task !== undefined) {
      TaskRequest.encode(message.task, writer.uint32(10).fork()).join();
    }
    if (message.frameSampleRateMs !== 0) {
      writer.uint32(16).int32(message.frameSampleRateMs);
    }
    if (message.parametersJson !== "") {
      writer.uint32(26).string(message.parametersJson);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VideoAnalysisRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVideoAnalysisRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.task = TaskRequest.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.frameSampleRateMs = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.parametersJson = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VideoAnalysisRequest {
    return {
      task: isSet(object.task) ? TaskRequest.fromJSON(object.task) : undefined,
      frameSampleRateMs: isSet(object.frameSampleRateMs) ? globalThis.Number(object.frameSampleRateMs) : 0,
      parametersJson: isSet(object.parametersJson) ? globalThis.String(object.parametersJson) : "",
    };
  },

  toJSON(message: VideoAnalysisRequest): unknown {
    const obj: any = {};
    if (message.task !== undefined) {
      obj.task = TaskRequest.toJSON(message.task);
    }
    if (message.frameSampleRateMs !== 0) {
      obj.frameSampleRateMs = Math.round(message.frameSampleRateMs);
    }
    if (message.parametersJson !== "") {
      obj.parametersJson = message.parametersJson;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<VideoAnalysisRequest>, I>>(base?: I): VideoAnalysisRequest {
    return VideoAnalysisRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<VideoAnalysisRequest>, I>>(object: I): VideoAnalysisRequest {
    const message = createBaseVideoAnalysisRequest();
    message.task = (object.task !== undefined && object.task !== null)
      ? TaskRequest.fromPartial(object.task)
      : undefined;
    message.frameSampleRateMs = object.frameSampleRateMs ?? 0;
    message.parametersJson = object.parametersJson ?? "";
    return message;
  },
};

function createBaseDetectedObject(): DetectedObject {
  return { label: "", confidence: 0, xmin: 0, ymin: 0, xmax: 0, ymax: 0, timestamp: undefined };
}

export const DetectedObject: MessageFns<DetectedObject> = {
  encode(message: DetectedObject, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.label !== "") {
      writer.uint32(10).string(message.label);
    }
    if (message.confidence !== 0) {
      writer.uint32(17).double(message.confidence);
    }
    if (message.xmin !== 0) {
      writer.uint32(24).int32(message.xmin);
    }
    if (message.ymin !== 0) {
      writer.uint32(32).int32(message.ymin);
    }
    if (message.xmax !== 0) {
      writer.uint32(40).int32(message.xmax);
    }
    if (message.ymax !== 0) {
      writer.uint32(48).int32(message.ymax);
    }
    if (message.timestamp !== undefined) {
      Timestamp.encode(toTimestamp(message.timestamp), writer.uint32(58).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DetectedObject {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDetectedObject();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.label = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 17) {
            break;
          }

          message.confidence = reader.double();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.xmin = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.ymin = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.xmax = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.ymax = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.timestamp = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DetectedObject {
    return {
      label: isSet(object.label) ? globalThis.String(object.label) : "",
      confidence: isSet(object.confidence) ? globalThis.Number(object.confidence) : 0,
      xmin: isSet(object.xmin) ? globalThis.Number(object.xmin) : 0,
      ymin: isSet(object.ymin) ? globalThis.Number(object.ymin) : 0,
      xmax: isSet(object.xmax) ? globalThis.Number(object.xmax) : 0,
      ymax: isSet(object.ymax) ? globalThis.Number(object.ymax) : 0,
      timestamp: isSet(object.timestamp) ? fromJsonTimestamp(object.timestamp) : undefined,
    };
  },

  toJSON(message: DetectedObject): unknown {
    const obj: any = {};
    if (message.label !== "") {
      obj.label = message.label;
    }
    if (message.confidence !== 0) {
      obj.confidence = message.confidence;
    }
    if (message.xmin !== 0) {
      obj.xmin = Math.round(message.xmin);
    }
    if (message.ymin !== 0) {
      obj.ymin = Math.round(message.ymin);
    }
    if (message.xmax !== 0) {
      obj.xmax = Math.round(message.xmax);
    }
    if (message.ymax !== 0) {
      obj.ymax = Math.round(message.ymax);
    }
    if (message.timestamp !== undefined) {
      obj.timestamp = message.timestamp.toISOString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DetectedObject>, I>>(base?: I): DetectedObject {
    return DetectedObject.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DetectedObject>, I>>(object: I): DetectedObject {
    const message = createBaseDetectedObject();
    message.label = object.label ?? "";
    message.confidence = object.confidence ?? 0;
    message.xmin = object.xmin ?? 0;
    message.ymin = object.ymin ?? 0;
    message.xmax = object.xmax ?? 0;
    message.ymax = object.ymax ?? 0;
    message.timestamp = object.timestamp ?? undefined;
    return message;
  },
};

function createBaseOCRText(): OCRText {
  return { text: "", confidence: 0, timestamp: undefined, language: "" };
}

export const OCRText: MessageFns<OCRText> = {
  encode(message: OCRText, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.text !== "") {
      writer.uint32(10).string(message.text);
    }
    if (message.confidence !== 0) {
      writer.uint32(17).double(message.confidence);
    }
    if (message.timestamp !== undefined) {
      Timestamp.encode(toTimestamp(message.timestamp), writer.uint32(26).fork()).join();
    }
    if (message.language !== "") {
      writer.uint32(34).string(message.language);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OCRText {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOCRText();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.text = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 17) {
            break;
          }

          message.confidence = reader.double();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.timestamp = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.language = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OCRText {
    return {
      text: isSet(object.text) ? globalThis.String(object.text) : "",
      confidence: isSet(object.confidence) ? globalThis.Number(object.confidence) : 0,
      timestamp: isSet(object.timestamp) ? fromJsonTimestamp(object.timestamp) : undefined,
      language: isSet(object.language) ? globalThis.String(object.language) : "",
    };
  },

  toJSON(message: OCRText): unknown {
    const obj: any = {};
    if (message.text !== "") {
      obj.text = message.text;
    }
    if (message.confidence !== 0) {
      obj.confidence = message.confidence;
    }
    if (message.timestamp !== undefined) {
      obj.timestamp = message.timestamp.toISOString();
    }
    if (message.language !== "") {
      obj.language = message.language;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<OCRText>, I>>(base?: I): OCRText {
    return OCRText.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<OCRText>, I>>(object: I): OCRText {
    const message = createBaseOCRText();
    message.text = object.text ?? "";
    message.confidence = object.confidence ?? 0;
    message.timestamp = object.timestamp ?? undefined;
    message.language = object.language ?? "";
    return message;
  },
};

function createBaseGraphCrop(): GraphCrop {
  return { imagePath: "", timestamp: undefined, graphType: "" };
}

export const GraphCrop: MessageFns<GraphCrop> = {
  encode(message: GraphCrop, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.imagePath !== "") {
      writer.uint32(10).string(message.imagePath);
    }
    if (message.timestamp !== undefined) {
      Timestamp.encode(toTimestamp(message.timestamp), writer.uint32(18).fork()).join();
    }
    if (message.graphType !== "") {
      writer.uint32(26).string(message.graphType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GraphCrop {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGraphCrop();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.imagePath = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.timestamp = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.graphType = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GraphCrop {
    return {
      imagePath: isSet(object.imagePath) ? globalThis.String(object.imagePath) : "",
      timestamp: isSet(object.timestamp) ? fromJsonTimestamp(object.timestamp) : undefined,
      graphType: isSet(object.graphType) ? globalThis.String(object.graphType) : "",
    };
  },

  toJSON(message: GraphCrop): unknown {
    const obj: any = {};
    if (message.imagePath !== "") {
      obj.imagePath = message.imagePath;
    }
    if (message.timestamp !== undefined) {
      obj.timestamp = message.timestamp.toISOString();
    }
    if (message.graphType !== "") {
      obj.graphType = message.graphType;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GraphCrop>, I>>(base?: I): GraphCrop {
    return GraphCrop.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GraphCrop>, I>>(object: I): GraphCrop {
    const message = createBaseGraphCrop();
    message.imagePath = object.imagePath ?? "";
    message.timestamp = object.timestamp ?? undefined;
    message.graphType = object.graphType ?? "";
    return message;
  },
};

function createBaseVisionChunk(): VisionChunk {
  return { taskId: "", objects: [], ocr: [], graphs: [] };
}

export const VisionChunk: MessageFns<VisionChunk> = {
  encode(message: VisionChunk, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.taskId !== "") {
      writer.uint32(10).string(message.taskId);
    }
    for (const v of message.objects) {
      DetectedObject.encode(v!, writer.uint32(18).fork()).join();
    }
    for (const v of message.ocr) {
      OCRText.encode(v!, writer.uint32(26).fork()).join();
    }
    for (const v of message.graphs) {
      GraphCrop.encode(v!, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VisionChunk {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVisionChunk();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.taskId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.objects.push(DetectedObject.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.ocr.push(OCRText.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.graphs.push(GraphCrop.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VisionChunk {
    return {
      taskId: isSet(object.taskId) ? globalThis.String(object.taskId) : "",
      objects: globalThis.Array.isArray(object?.objects)
        ? object.objects.map((e: any) => DetectedObject.fromJSON(e))
        : [],
      ocr: globalThis.Array.isArray(object?.ocr) ? object.ocr.map((e: any) => OCRText.fromJSON(e)) : [],
      graphs: globalThis.Array.isArray(object?.graphs) ? object.graphs.map((e: any) => GraphCrop.fromJSON(e)) : [],
    };
  },

  toJSON(message: VisionChunk): unknown {
    const obj: any = {};
    if (message.taskId !== "") {
      obj.taskId = message.taskId;
    }
    if (message.objects?.length) {
      obj.objects = message.objects.map((e) => DetectedObject.toJSON(e));
    }
    if (message.ocr?.length) {
      obj.ocr = message.ocr.map((e) => OCRText.toJSON(e));
    }
    if (message.graphs?.length) {
      obj.graphs = message.graphs.map((e) => GraphCrop.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<VisionChunk>, I>>(base?: I): VisionChunk {
    return VisionChunk.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<VisionChunk>, I>>(object: I): VisionChunk {
    const message = createBaseVisionChunk();
    message.taskId = object.taskId ?? "";
    message.objects = object.objects?.map((e) => DetectedObject.fromPartial(e)) || [];
    message.ocr = object.ocr?.map((e) => OCRText.fromPartial(e)) || [];
    message.graphs = object.graphs?.map((e) => GraphCrop.fromPartial(e)) || [];
    return message;
  },
};

function createBaseVisionResult(): VisionResult {
  return { taskId: "", objects: [], ocr: [], graphs: [], resultJsonPath: "", status: 0, error: "" };
}

export const VisionResult: MessageFns<VisionResult> = {
  encode(message: VisionResult, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.taskId !== "") {
      writer.uint32(10).string(message.taskId);
    }
    for (const v of message.objects) {
      DetectedObject.encode(v!, writer.uint32(18).fork()).join();
    }
    for (const v of message.ocr) {
      OCRText.encode(v!, writer.uint32(26).fork()).join();
    }
    for (const v of message.graphs) {
      GraphCrop.encode(v!, writer.uint32(34).fork()).join();
    }
    if (message.resultJsonPath !== "") {
      writer.uint32(42).string(message.resultJsonPath);
    }
    if (message.status !== 0) {
      writer.uint32(48).int32(message.status);
    }
    if (message.error !== "") {
      writer.uint32(58).string(message.error);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VisionResult {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVisionResult();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.taskId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.objects.push(DetectedObject.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.ocr.push(OCRText.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.graphs.push(GraphCrop.decode(reader, reader.uint32()));
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.resultJsonPath = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.error = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VisionResult {
    return {
      taskId: isSet(object.taskId) ? globalThis.String(object.taskId) : "",
      objects: globalThis.Array.isArray(object?.objects)
        ? object.objects.map((e: any) => DetectedObject.fromJSON(e))
        : [],
      ocr: globalThis.Array.isArray(object?.ocr) ? object.ocr.map((e: any) => OCRText.fromJSON(e)) : [],
      graphs: globalThis.Array.isArray(object?.graphs) ? object.graphs.map((e: any) => GraphCrop.fromJSON(e)) : [],
      resultJsonPath: isSet(object.resultJsonPath) ? globalThis.String(object.resultJsonPath) : "",
      status: isSet(object.status) ? taskStatusFromJSON(object.status) : 0,
      error: isSet(object.error) ? globalThis.String(object.error) : "",
    };
  },

  toJSON(message: VisionResult): unknown {
    const obj: any = {};
    if (message.taskId !== "") {
      obj.taskId = message.taskId;
    }
    if (message.objects?.length) {
      obj.objects = message.objects.map((e) => DetectedObject.toJSON(e));
    }
    if (message.ocr?.length) {
      obj.ocr = message.ocr.map((e) => OCRText.toJSON(e));
    }
    if (message.graphs?.length) {
      obj.graphs = message.graphs.map((e) => GraphCrop.toJSON(e));
    }
    if (message.resultJsonPath !== "") {
      obj.resultJsonPath = message.resultJsonPath;
    }
    if (message.status !== 0) {
      obj.status = taskStatusToJSON(message.status);
    }
    if (message.error !== "") {
      obj.error = message.error;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<VisionResult>, I>>(base?: I): VisionResult {
    return VisionResult.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<VisionResult>, I>>(object: I): VisionResult {
    const message = createBaseVisionResult();
    message.taskId = object.taskId ?? "";
    message.objects = object.objects?.map((e) => DetectedObject.fromPartial(e)) || [];
    message.ocr = object.ocr?.map((e) => OCRText.fromPartial(e)) || [];
    message.graphs = object.graphs?.map((e) => GraphCrop.fromPartial(e)) || [];
    message.resultJsonPath = object.resultJsonPath ?? "";
    message.status = object.status ?? 0;
    message.error = object.error ?? "";
    return message;
  },
};

function createBaseGraphDetectionResult(): GraphDetectionResult {
  return { taskId: "", crops: [], resultJsonPath: "" };
}

export const GraphDetectionResult: MessageFns<GraphDetectionResult> = {
  encode(message: GraphDetectionResult, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.taskId !== "") {
      writer.uint32(10).string(message.taskId);
    }
    for (const v of message.crops) {
      GraphCrop.encode(v!, writer.uint32(18).fork()).join();
    }
    if (message.resultJsonPath !== "") {
      writer.uint32(26).string(message.resultJsonPath);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GraphDetectionResult {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGraphDetectionResult();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.taskId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.crops.push(GraphCrop.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.resultJsonPath = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GraphDetectionResult {
    return {
      taskId: isSet(object.taskId) ? globalThis.String(object.taskId) : "",
      crops: globalThis.Array.isArray(object?.crops) ? object.crops.map((e: any) => GraphCrop.fromJSON(e)) : [],
      resultJsonPath: isSet(object.resultJsonPath) ? globalThis.String(object.resultJsonPath) : "",
    };
  },

  toJSON(message: GraphDetectionResult): unknown {
    const obj: any = {};
    if (message.taskId !== "") {
      obj.taskId = message.taskId;
    }
    if (message.crops?.length) {
      obj.crops = message.crops.map((e) => GraphCrop.toJSON(e));
    }
    if (message.resultJsonPath !== "") {
      obj.resultJsonPath = message.resultJsonPath;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GraphDetectionResult>, I>>(base?: I): GraphDetectionResult {
    return GraphDetectionResult.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GraphDetectionResult>, I>>(object: I): GraphDetectionResult {
    const message = createBaseGraphDetectionResult();
    message.taskId = object.taskId ?? "";
    message.crops = object.crops?.map((e) => GraphCrop.fromPartial(e)) || [];
    message.resultJsonPath = object.resultJsonPath ?? "";
    return message;
  },
};

export type VisionAgentService = typeof VisionAgentService;
export const VisionAgentService = {
  analyzeVideo: {
    path: "/genai.vision.VisionAgent/AnalyzeVideo",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: VideoAnalysisRequest): Buffer => Buffer.from(VideoAnalysisRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): VideoAnalysisRequest => VideoAnalysisRequest.decode(value),
    responseSerialize: (value: VisionResult): Buffer => Buffer.from(VisionResult.encode(value).finish()),
    responseDeserialize: (value: Buffer): VisionResult => VisionResult.decode(value),
  },
  detectGraphs: {
    path: "/genai.vision.VisionAgent/DetectGraphs",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: VideoAnalysisRequest): Buffer => Buffer.from(VideoAnalysisRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): VideoAnalysisRequest => VideoAnalysisRequest.decode(value),
    responseSerialize: (value: GraphDetectionResult): Buffer =>
      Buffer.from(GraphDetectionResult.encode(value).finish()),
    responseDeserialize: (value: Buffer): GraphDetectionResult => GraphDetectionResult.decode(value),
  },
  /** Optionally stream incremental frame analysis */
  streamAnalyze: {
    path: "/genai.vision.VisionAgent/StreamAnalyze",
    requestStream: false,
    responseStream: true,
    requestSerialize: (value: VideoAnalysisRequest): Buffer => Buffer.from(VideoAnalysisRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): VideoAnalysisRequest => VideoAnalysisRequest.decode(value),
    responseSerialize: (value: VisionChunk): Buffer => Buffer.from(VisionChunk.encode(value).finish()),
    responseDeserialize: (value: Buffer): VisionChunk => VisionChunk.decode(value),
  },
} as const;

export interface VisionAgentServer extends UntypedServiceImplementation {
  analyzeVideo: handleUnaryCall<VideoAnalysisRequest, VisionResult>;
  detectGraphs: handleUnaryCall<VideoAnalysisRequest, GraphDetectionResult>;
  /** Optionally stream incremental frame analysis */
  streamAnalyze: handleServerStreamingCall<VideoAnalysisRequest, VisionChunk>;
}

export interface VisionAgentClient extends Client {
  analyzeVideo(
    request: VideoAnalysisRequest,
    callback: (error: ServiceError | null, response: VisionResult) => void,
  ): ClientUnaryCall;
  analyzeVideo(
    request: VideoAnalysisRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: VisionResult) => void,
  ): ClientUnaryCall;
  analyzeVideo(
    request: VideoAnalysisRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: VisionResult) => void,
  ): ClientUnaryCall;
  detectGraphs(
    request: VideoAnalysisRequest,
    callback: (error: ServiceError | null, response: GraphDetectionResult) => void,
  ): ClientUnaryCall;
  detectGraphs(
    request: VideoAnalysisRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GraphDetectionResult) => void,
  ): ClientUnaryCall;
  detectGraphs(
    request: VideoAnalysisRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GraphDetectionResult) => void,
  ): ClientUnaryCall;
  /** Optionally stream incremental frame analysis */
  streamAnalyze(request: VideoAnalysisRequest, options?: Partial<CallOptions>): ClientReadableStream<VisionChunk>;
  streamAnalyze(
    request: VideoAnalysisRequest,
    metadata?: Metadata,
    options?: Partial<CallOptions>,
  ): ClientReadableStream<VisionChunk>;
}

export const VisionAgentClient = makeGenericClientConstructor(
  VisionAgentService,
  "genai.vision.VisionAgent",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): VisionAgentClient;
  service: typeof VisionAgentService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
