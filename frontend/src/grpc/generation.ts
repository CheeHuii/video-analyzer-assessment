// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.8.0
//   protoc               v6.33.0
// source: generation.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  type ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  type Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import { FileRef, TaskRequest } from "./common";

export const protobufPackage = "genai.generation";

export interface PDFRequest {
  task?:
    | TaskRequest
    | undefined;
  /** optional template ID or JSON */
  template: string;
}

export interface PPTXRequest {
  task?: TaskRequest | undefined;
  maxSlides: number;
  template: string;
}

export interface GenerationResult {
  taskId: string;
  success: boolean;
  /** path to generated file */
  output?:
    | FileRef
    | undefined;
  /** optional metadata path */
  metadataJson: string;
  error: string;
}

export interface SummaryRequest {
  task?:
    | TaskRequest
    | undefined;
  /** e.g., "Summarize key points in 5 bullets" */
  prompt: string;
  maxTokens: number;
}

export interface SummaryResponse {
  taskId: string;
  summaryText: string;
  /** path to json storing the detailed answer */
  resultJson: string;
}

function createBasePDFRequest(): PDFRequest {
  return { task: undefined, template: "" };
}

export const PDFRequest: MessageFns<PDFRequest> = {
  encode(message: PDFRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.task !== undefined) {
      TaskRequest.encode(message.task, writer.uint32(10).fork()).join();
    }
    if (message.template !== "") {
      writer.uint32(18).string(message.template);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PDFRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePDFRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.task = TaskRequest.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.template = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PDFRequest {
    return {
      task: isSet(object.task) ? TaskRequest.fromJSON(object.task) : undefined,
      template: isSet(object.template) ? globalThis.String(object.template) : "",
    };
  },

  toJSON(message: PDFRequest): unknown {
    const obj: any = {};
    if (message.task !== undefined) {
      obj.task = TaskRequest.toJSON(message.task);
    }
    if (message.template !== "") {
      obj.template = message.template;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PDFRequest>, I>>(base?: I): PDFRequest {
    return PDFRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PDFRequest>, I>>(object: I): PDFRequest {
    const message = createBasePDFRequest();
    message.task = (object.task !== undefined && object.task !== null)
      ? TaskRequest.fromPartial(object.task)
      : undefined;
    message.template = object.template ?? "";
    return message;
  },
};

function createBasePPTXRequest(): PPTXRequest {
  return { task: undefined, maxSlides: 0, template: "" };
}

export const PPTXRequest: MessageFns<PPTXRequest> = {
  encode(message: PPTXRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.task !== undefined) {
      TaskRequest.encode(message.task, writer.uint32(10).fork()).join();
    }
    if (message.maxSlides !== 0) {
      writer.uint32(16).int32(message.maxSlides);
    }
    if (message.template !== "") {
      writer.uint32(26).string(message.template);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PPTXRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePPTXRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.task = TaskRequest.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.maxSlides = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.template = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PPTXRequest {
    return {
      task: isSet(object.task) ? TaskRequest.fromJSON(object.task) : undefined,
      maxSlides: isSet(object.maxSlides) ? globalThis.Number(object.maxSlides) : 0,
      template: isSet(object.template) ? globalThis.String(object.template) : "",
    };
  },

  toJSON(message: PPTXRequest): unknown {
    const obj: any = {};
    if (message.task !== undefined) {
      obj.task = TaskRequest.toJSON(message.task);
    }
    if (message.maxSlides !== 0) {
      obj.maxSlides = Math.round(message.maxSlides);
    }
    if (message.template !== "") {
      obj.template = message.template;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PPTXRequest>, I>>(base?: I): PPTXRequest {
    return PPTXRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PPTXRequest>, I>>(object: I): PPTXRequest {
    const message = createBasePPTXRequest();
    message.task = (object.task !== undefined && object.task !== null)
      ? TaskRequest.fromPartial(object.task)
      : undefined;
    message.maxSlides = object.maxSlides ?? 0;
    message.template = object.template ?? "";
    return message;
  },
};

function createBaseGenerationResult(): GenerationResult {
  return { taskId: "", success: false, output: undefined, metadataJson: "", error: "" };
}

export const GenerationResult: MessageFns<GenerationResult> = {
  encode(message: GenerationResult, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.taskId !== "") {
      writer.uint32(10).string(message.taskId);
    }
    if (message.success !== false) {
      writer.uint32(16).bool(message.success);
    }
    if (message.output !== undefined) {
      FileRef.encode(message.output, writer.uint32(26).fork()).join();
    }
    if (message.metadataJson !== "") {
      writer.uint32(34).string(message.metadataJson);
    }
    if (message.error !== "") {
      writer.uint32(42).string(message.error);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GenerationResult {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGenerationResult();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.taskId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.output = FileRef.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.metadataJson = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.error = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GenerationResult {
    return {
      taskId: isSet(object.taskId) ? globalThis.String(object.taskId) : "",
      success: isSet(object.success) ? globalThis.Boolean(object.success) : false,
      output: isSet(object.output) ? FileRef.fromJSON(object.output) : undefined,
      metadataJson: isSet(object.metadataJson) ? globalThis.String(object.metadataJson) : "",
      error: isSet(object.error) ? globalThis.String(object.error) : "",
    };
  },

  toJSON(message: GenerationResult): unknown {
    const obj: any = {};
    if (message.taskId !== "") {
      obj.taskId = message.taskId;
    }
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.output !== undefined) {
      obj.output = FileRef.toJSON(message.output);
    }
    if (message.metadataJson !== "") {
      obj.metadataJson = message.metadataJson;
    }
    if (message.error !== "") {
      obj.error = message.error;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GenerationResult>, I>>(base?: I): GenerationResult {
    return GenerationResult.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GenerationResult>, I>>(object: I): GenerationResult {
    const message = createBaseGenerationResult();
    message.taskId = object.taskId ?? "";
    message.success = object.success ?? false;
    message.output = (object.output !== undefined && object.output !== null)
      ? FileRef.fromPartial(object.output)
      : undefined;
    message.metadataJson = object.metadataJson ?? "";
    message.error = object.error ?? "";
    return message;
  },
};

function createBaseSummaryRequest(): SummaryRequest {
  return { task: undefined, prompt: "", maxTokens: 0 };
}

export const SummaryRequest: MessageFns<SummaryRequest> = {
  encode(message: SummaryRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.task !== undefined) {
      TaskRequest.encode(message.task, writer.uint32(10).fork()).join();
    }
    if (message.prompt !== "") {
      writer.uint32(18).string(message.prompt);
    }
    if (message.maxTokens !== 0) {
      writer.uint32(24).int32(message.maxTokens);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SummaryRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSummaryRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.task = TaskRequest.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.prompt = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.maxTokens = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SummaryRequest {
    return {
      task: isSet(object.task) ? TaskRequest.fromJSON(object.task) : undefined,
      prompt: isSet(object.prompt) ? globalThis.String(object.prompt) : "",
      maxTokens: isSet(object.maxTokens) ? globalThis.Number(object.maxTokens) : 0,
    };
  },

  toJSON(message: SummaryRequest): unknown {
    const obj: any = {};
    if (message.task !== undefined) {
      obj.task = TaskRequest.toJSON(message.task);
    }
    if (message.prompt !== "") {
      obj.prompt = message.prompt;
    }
    if (message.maxTokens !== 0) {
      obj.maxTokens = Math.round(message.maxTokens);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SummaryRequest>, I>>(base?: I): SummaryRequest {
    return SummaryRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SummaryRequest>, I>>(object: I): SummaryRequest {
    const message = createBaseSummaryRequest();
    message.task = (object.task !== undefined && object.task !== null)
      ? TaskRequest.fromPartial(object.task)
      : undefined;
    message.prompt = object.prompt ?? "";
    message.maxTokens = object.maxTokens ?? 0;
    return message;
  },
};

function createBaseSummaryResponse(): SummaryResponse {
  return { taskId: "", summaryText: "", resultJson: "" };
}

export const SummaryResponse: MessageFns<SummaryResponse> = {
  encode(message: SummaryResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.taskId !== "") {
      writer.uint32(10).string(message.taskId);
    }
    if (message.summaryText !== "") {
      writer.uint32(18).string(message.summaryText);
    }
    if (message.resultJson !== "") {
      writer.uint32(26).string(message.resultJson);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SummaryResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSummaryResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.taskId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.summaryText = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.resultJson = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SummaryResponse {
    return {
      taskId: isSet(object.taskId) ? globalThis.String(object.taskId) : "",
      summaryText: isSet(object.summaryText) ? globalThis.String(object.summaryText) : "",
      resultJson: isSet(object.resultJson) ? globalThis.String(object.resultJson) : "",
    };
  },

  toJSON(message: SummaryResponse): unknown {
    const obj: any = {};
    if (message.taskId !== "") {
      obj.taskId = message.taskId;
    }
    if (message.summaryText !== "") {
      obj.summaryText = message.summaryText;
    }
    if (message.resultJson !== "") {
      obj.resultJson = message.resultJson;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SummaryResponse>, I>>(base?: I): SummaryResponse {
    return SummaryResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SummaryResponse>, I>>(object: I): SummaryResponse {
    const message = createBaseSummaryResponse();
    message.taskId = object.taskId ?? "";
    message.summaryText = object.summaryText ?? "";
    message.resultJson = object.resultJson ?? "";
    return message;
  },
};

export type GenerationAgentService = typeof GenerationAgentService;
export const GenerationAgentService = {
  /** Generate a PDF summary */
  generatePdf: {
    path: "/genai.generation.GenerationAgent/GeneratePDF",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: PDFRequest): Buffer => Buffer.from(PDFRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): PDFRequest => PDFRequest.decode(value),
    responseSerialize: (value: GenerationResult): Buffer => Buffer.from(GenerationResult.encode(value).finish()),
    responseDeserialize: (value: Buffer): GenerationResult => GenerationResult.decode(value),
  },
  /** Generate PowerPoint */
  generatePptx: {
    path: "/genai.generation.GenerationAgent/GeneratePPTX",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: PPTXRequest): Buffer => Buffer.from(PPTXRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): PPTXRequest => PPTXRequest.decode(value),
    responseSerialize: (value: GenerationResult): Buffer => Buffer.from(GenerationResult.encode(value).finish()),
    responseDeserialize: (value: Buffer): GenerationResult => GenerationResult.decode(value),
  },
  /** Generate short textual summary or answer */
  generateSummary: {
    path: "/genai.generation.GenerationAgent/GenerateSummary",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: SummaryRequest): Buffer => Buffer.from(SummaryRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): SummaryRequest => SummaryRequest.decode(value),
    responseSerialize: (value: SummaryResponse): Buffer => Buffer.from(SummaryResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): SummaryResponse => SummaryResponse.decode(value),
  },
} as const;

export interface GenerationAgentServer extends UntypedServiceImplementation {
  /** Generate a PDF summary */
  generatePdf: handleUnaryCall<PDFRequest, GenerationResult>;
  /** Generate PowerPoint */
  generatePptx: handleUnaryCall<PPTXRequest, GenerationResult>;
  /** Generate short textual summary or answer */
  generateSummary: handleUnaryCall<SummaryRequest, SummaryResponse>;
}

export interface GenerationAgentClient extends Client {
  /** Generate a PDF summary */
  generatePdf(
    request: PDFRequest,
    callback: (error: ServiceError | null, response: GenerationResult) => void,
  ): ClientUnaryCall;
  generatePdf(
    request: PDFRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GenerationResult) => void,
  ): ClientUnaryCall;
  generatePdf(
    request: PDFRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GenerationResult) => void,
  ): ClientUnaryCall;
  /** Generate PowerPoint */
  generatePptx(
    request: PPTXRequest,
    callback: (error: ServiceError | null, response: GenerationResult) => void,
  ): ClientUnaryCall;
  generatePptx(
    request: PPTXRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GenerationResult) => void,
  ): ClientUnaryCall;
  generatePptx(
    request: PPTXRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GenerationResult) => void,
  ): ClientUnaryCall;
  /** Generate short textual summary or answer */
  generateSummary(
    request: SummaryRequest,
    callback: (error: ServiceError | null, response: SummaryResponse) => void,
  ): ClientUnaryCall;
  generateSummary(
    request: SummaryRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: SummaryResponse) => void,
  ): ClientUnaryCall;
  generateSummary(
    request: SummaryRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: SummaryResponse) => void,
  ): ClientUnaryCall;
}

export const GenerationAgentClient = makeGenericClientConstructor(
  GenerationAgentService,
  "genai.generation.GenerationAgent",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): GenerationAgentClient;
  service: typeof GenerationAgentService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
