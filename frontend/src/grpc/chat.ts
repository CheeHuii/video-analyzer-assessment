// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.8.0
//   protoc               v6.33.0
// source: chat.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  type ChannelCredentials,
  Client,
  type ClientDuplexStream,
  type ClientOptions,
  type ClientUnaryCall,
  type handleBidiStreamingCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  type Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import { Timestamp } from "./google/protobuf/timestamp";

export const protobufPackage = "genai.chat";

export interface ChatMessage {
  messageId: string;
  userId: string;
  text: string;
  /** file paths */
  attachments: string[];
  createdAt?:
    | Date
    | undefined;
  /** optional: if the message references a task */
  referencedTaskId: string;
}

export interface ChatResponse {
  /** id of assistant response */
  messageId: string;
  /** original message id */
  inReplyTo: string;
  text: string;
  /** e.g., /artifacts/summary.pdf */
  attachments: string[];
  createdAt?:
    | Date
    | undefined;
  /** optional confidence for assertions */
  confidence: number;
  needsClarification: boolean;
  clarificationOptions: string[];
}

export interface ChatAck {
  ok: boolean;
  message: string;
  serverTimestamp: string;
}

export interface HistoryRequest {
  userId: string;
  page: number;
  pageSize: number;
}

export interface HistoryResponse {
  messages: ChatMessage[];
  total: number;
}

function createBaseChatMessage(): ChatMessage {
  return { messageId: "", userId: "", text: "", attachments: [], createdAt: undefined, referencedTaskId: "" };
}

export const ChatMessage: MessageFns<ChatMessage> = {
  encode(message: ChatMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.messageId !== "") {
      writer.uint32(10).string(message.messageId);
    }
    if (message.userId !== "") {
      writer.uint32(18).string(message.userId);
    }
    if (message.text !== "") {
      writer.uint32(26).string(message.text);
    }
    for (const v of message.attachments) {
      writer.uint32(34).string(v!);
    }
    if (message.createdAt !== undefined) {
      Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(42).fork()).join();
    }
    if (message.referencedTaskId !== "") {
      writer.uint32(50).string(message.referencedTaskId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ChatMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseChatMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.messageId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.text = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.attachments.push(reader.string());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.createdAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.referencedTaskId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ChatMessage {
    return {
      messageId: isSet(object.messageId) ? globalThis.String(object.messageId) : "",
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      text: isSet(object.text) ? globalThis.String(object.text) : "",
      attachments: globalThis.Array.isArray(object?.attachments)
        ? object.attachments.map((e: any) => globalThis.String(e))
        : [],
      createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
      referencedTaskId: isSet(object.referencedTaskId) ? globalThis.String(object.referencedTaskId) : "",
    };
  },

  toJSON(message: ChatMessage): unknown {
    const obj: any = {};
    if (message.messageId !== "") {
      obj.messageId = message.messageId;
    }
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.text !== "") {
      obj.text = message.text;
    }
    if (message.attachments?.length) {
      obj.attachments = message.attachments;
    }
    if (message.createdAt !== undefined) {
      obj.createdAt = message.createdAt.toISOString();
    }
    if (message.referencedTaskId !== "") {
      obj.referencedTaskId = message.referencedTaskId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ChatMessage>, I>>(base?: I): ChatMessage {
    return ChatMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ChatMessage>, I>>(object: I): ChatMessage {
    const message = createBaseChatMessage();
    message.messageId = object.messageId ?? "";
    message.userId = object.userId ?? "";
    message.text = object.text ?? "";
    message.attachments = object.attachments?.map((e) => e) || [];
    message.createdAt = object.createdAt ?? undefined;
    message.referencedTaskId = object.referencedTaskId ?? "";
    return message;
  },
};

function createBaseChatResponse(): ChatResponse {
  return {
    messageId: "",
    inReplyTo: "",
    text: "",
    attachments: [],
    createdAt: undefined,
    confidence: 0,
    needsClarification: false,
    clarificationOptions: [],
  };
}

export const ChatResponse: MessageFns<ChatResponse> = {
  encode(message: ChatResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.messageId !== "") {
      writer.uint32(10).string(message.messageId);
    }
    if (message.inReplyTo !== "") {
      writer.uint32(18).string(message.inReplyTo);
    }
    if (message.text !== "") {
      writer.uint32(26).string(message.text);
    }
    for (const v of message.attachments) {
      writer.uint32(34).string(v!);
    }
    if (message.createdAt !== undefined) {
      Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(42).fork()).join();
    }
    if (message.confidence !== 0) {
      writer.uint32(49).double(message.confidence);
    }
    if (message.needsClarification !== false) {
      writer.uint32(56).bool(message.needsClarification);
    }
    for (const v of message.clarificationOptions) {
      writer.uint32(66).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ChatResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseChatResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.messageId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.inReplyTo = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.text = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.attachments.push(reader.string());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.createdAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 6: {
          if (tag !== 49) {
            break;
          }

          message.confidence = reader.double();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.needsClarification = reader.bool();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.clarificationOptions.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ChatResponse {
    return {
      messageId: isSet(object.messageId) ? globalThis.String(object.messageId) : "",
      inReplyTo: isSet(object.inReplyTo) ? globalThis.String(object.inReplyTo) : "",
      text: isSet(object.text) ? globalThis.String(object.text) : "",
      attachments: globalThis.Array.isArray(object?.attachments)
        ? object.attachments.map((e: any) => globalThis.String(e))
        : [],
      createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
      confidence: isSet(object.confidence) ? globalThis.Number(object.confidence) : 0,
      needsClarification: isSet(object.needsClarification) ? globalThis.Boolean(object.needsClarification) : false,
      clarificationOptions: globalThis.Array.isArray(object?.clarificationOptions)
        ? object.clarificationOptions.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ChatResponse): unknown {
    const obj: any = {};
    if (message.messageId !== "") {
      obj.messageId = message.messageId;
    }
    if (message.inReplyTo !== "") {
      obj.inReplyTo = message.inReplyTo;
    }
    if (message.text !== "") {
      obj.text = message.text;
    }
    if (message.attachments?.length) {
      obj.attachments = message.attachments;
    }
    if (message.createdAt !== undefined) {
      obj.createdAt = message.createdAt.toISOString();
    }
    if (message.confidence !== 0) {
      obj.confidence = message.confidence;
    }
    if (message.needsClarification !== false) {
      obj.needsClarification = message.needsClarification;
    }
    if (message.clarificationOptions?.length) {
      obj.clarificationOptions = message.clarificationOptions;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ChatResponse>, I>>(base?: I): ChatResponse {
    return ChatResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ChatResponse>, I>>(object: I): ChatResponse {
    const message = createBaseChatResponse();
    message.messageId = object.messageId ?? "";
    message.inReplyTo = object.inReplyTo ?? "";
    message.text = object.text ?? "";
    message.attachments = object.attachments?.map((e) => e) || [];
    message.createdAt = object.createdAt ?? undefined;
    message.confidence = object.confidence ?? 0;
    message.needsClarification = object.needsClarification ?? false;
    message.clarificationOptions = object.clarificationOptions?.map((e) => e) || [];
    return message;
  },
};

function createBaseChatAck(): ChatAck {
  return { ok: false, message: "", serverTimestamp: "" };
}

export const ChatAck: MessageFns<ChatAck> = {
  encode(message: ChatAck, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.ok !== false) {
      writer.uint32(8).bool(message.ok);
    }
    if (message.message !== "") {
      writer.uint32(18).string(message.message);
    }
    if (message.serverTimestamp !== "") {
      writer.uint32(26).string(message.serverTimestamp);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ChatAck {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseChatAck();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.ok = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.message = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.serverTimestamp = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ChatAck {
    return {
      ok: isSet(object.ok) ? globalThis.Boolean(object.ok) : false,
      message: isSet(object.message) ? globalThis.String(object.message) : "",
      serverTimestamp: isSet(object.serverTimestamp) ? globalThis.String(object.serverTimestamp) : "",
    };
  },

  toJSON(message: ChatAck): unknown {
    const obj: any = {};
    if (message.ok !== false) {
      obj.ok = message.ok;
    }
    if (message.message !== "") {
      obj.message = message.message;
    }
    if (message.serverTimestamp !== "") {
      obj.serverTimestamp = message.serverTimestamp;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ChatAck>, I>>(base?: I): ChatAck {
    return ChatAck.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ChatAck>, I>>(object: I): ChatAck {
    const message = createBaseChatAck();
    message.ok = object.ok ?? false;
    message.message = object.message ?? "";
    message.serverTimestamp = object.serverTimestamp ?? "";
    return message;
  },
};

function createBaseHistoryRequest(): HistoryRequest {
  return { userId: "", page: 0, pageSize: 0 };
}

export const HistoryRequest: MessageFns<HistoryRequest> = {
  encode(message: HistoryRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.page !== 0) {
      writer.uint32(16).int32(message.page);
    }
    if (message.pageSize !== 0) {
      writer.uint32(24).int32(message.pageSize);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HistoryRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHistoryRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.page = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HistoryRequest {
    return {
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      page: isSet(object.page) ? globalThis.Number(object.page) : 0,
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
    };
  },

  toJSON(message: HistoryRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.page !== 0) {
      obj.page = Math.round(message.page);
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<HistoryRequest>, I>>(base?: I): HistoryRequest {
    return HistoryRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<HistoryRequest>, I>>(object: I): HistoryRequest {
    const message = createBaseHistoryRequest();
    message.userId = object.userId ?? "";
    message.page = object.page ?? 0;
    message.pageSize = object.pageSize ?? 0;
    return message;
  },
};

function createBaseHistoryResponse(): HistoryResponse {
  return { messages: [], total: 0 };
}

export const HistoryResponse: MessageFns<HistoryResponse> = {
  encode(message: HistoryResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.messages) {
      ChatMessage.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.total !== 0) {
      writer.uint32(16).int32(message.total);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HistoryResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHistoryResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.messages.push(ChatMessage.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.total = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HistoryResponse {
    return {
      messages: globalThis.Array.isArray(object?.messages)
        ? object.messages.map((e: any) => ChatMessage.fromJSON(e))
        : [],
      total: isSet(object.total) ? globalThis.Number(object.total) : 0,
    };
  },

  toJSON(message: HistoryResponse): unknown {
    const obj: any = {};
    if (message.messages?.length) {
      obj.messages = message.messages.map((e) => ChatMessage.toJSON(e));
    }
    if (message.total !== 0) {
      obj.total = Math.round(message.total);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<HistoryResponse>, I>>(base?: I): HistoryResponse {
    return HistoryResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<HistoryResponse>, I>>(object: I): HistoryResponse {
    const message = createBaseHistoryResponse();
    message.messages = object.messages?.map((e) => ChatMessage.fromPartial(e)) || [];
    message.total = object.total ?? 0;
    return message;
  },
};

export type ChatServiceService = typeof ChatServiceService;
export const ChatServiceService = {
  /** Bi-directional stream: client sends messages, server replies with streamed responses */
  streamChat: {
    path: "/genai.chat.ChatService/StreamChat",
    requestStream: true,
    responseStream: true,
    requestSerialize: (value: ChatMessage): Buffer => Buffer.from(ChatMessage.encode(value).finish()),
    requestDeserialize: (value: Buffer): ChatMessage => ChatMessage.decode(value),
    responseSerialize: (value: ChatResponse): Buffer => Buffer.from(ChatResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): ChatResponse => ChatResponse.decode(value),
  },
  /** Non-streaming simple send */
  sendMessage: {
    path: "/genai.chat.ChatService/SendMessage",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ChatMessage): Buffer => Buffer.from(ChatMessage.encode(value).finish()),
    requestDeserialize: (value: Buffer): ChatMessage => ChatMessage.decode(value),
    responseSerialize: (value: ChatAck): Buffer => Buffer.from(ChatAck.encode(value).finish()),
    responseDeserialize: (value: Buffer): ChatAck => ChatAck.decode(value),
  },
  /** Retrieve history (pagination) */
  getHistory: {
    path: "/genai.chat.ChatService/GetHistory",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: HistoryRequest): Buffer => Buffer.from(HistoryRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): HistoryRequest => HistoryRequest.decode(value),
    responseSerialize: (value: HistoryResponse): Buffer => Buffer.from(HistoryResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): HistoryResponse => HistoryResponse.decode(value),
  },
} as const;

export interface ChatServiceServer extends UntypedServiceImplementation {
  /** Bi-directional stream: client sends messages, server replies with streamed responses */
  streamChat: handleBidiStreamingCall<ChatMessage, ChatResponse>;
  /** Non-streaming simple send */
  sendMessage: handleUnaryCall<ChatMessage, ChatAck>;
  /** Retrieve history (pagination) */
  getHistory: handleUnaryCall<HistoryRequest, HistoryResponse>;
}

export interface ChatServiceClient extends Client {
  /** Bi-directional stream: client sends messages, server replies with streamed responses */
  streamChat(): ClientDuplexStream<ChatMessage, ChatResponse>;
  streamChat(options: Partial<CallOptions>): ClientDuplexStream<ChatMessage, ChatResponse>;
  streamChat(metadata: Metadata, options?: Partial<CallOptions>): ClientDuplexStream<ChatMessage, ChatResponse>;
  /** Non-streaming simple send */
  sendMessage(request: ChatMessage, callback: (error: ServiceError | null, response: ChatAck) => void): ClientUnaryCall;
  sendMessage(
    request: ChatMessage,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: ChatAck) => void,
  ): ClientUnaryCall;
  sendMessage(
    request: ChatMessage,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ChatAck) => void,
  ): ClientUnaryCall;
  /** Retrieve history (pagination) */
  getHistory(
    request: HistoryRequest,
    callback: (error: ServiceError | null, response: HistoryResponse) => void,
  ): ClientUnaryCall;
  getHistory(
    request: HistoryRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: HistoryResponse) => void,
  ): ClientUnaryCall;
  getHistory(
    request: HistoryRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: HistoryResponse) => void,
  ): ClientUnaryCall;
}

export const ChatServiceClient = makeGenericClientConstructor(
  ChatServiceService,
  "genai.chat.ChatService",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): ChatServiceClient;
  service: typeof ChatServiceService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
