// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.8.0
//   protoc               v6.33.0
// source: agent_manager.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  type ChannelCredentials,
  Client,
  type ClientDuplexStream,
  type ClientOptions,
  type ClientReadableStream,
  type ClientUnaryCall,
  type handleBidiStreamingCall,
  type handleServerStreamingCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  type Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import { AgentInfo, ProgressUpdate, TaskRequest } from "./common";
import { Empty } from "./google/protobuf/empty";

export const protobufPackage = "genai.manager";

export interface RegisterResponse {
  ok: boolean;
  assignedId: string;
  message: string;
}

export interface HeartbeatRequest {
  agent?: AgentInfo | undefined;
}

export interface HeartbeatResponse {
  /** e.g., "run-task:<task_id>" */
  commands: string[];
}

export interface AssignResponse {
  accepted: boolean;
  assignedAgentId: string;
  message: string;
}

export interface AgentList {
  agents: AgentInfo[];
}

export interface TaskProgressRequest {
  taskId: string;
  agentId: string;
}

function createBaseRegisterResponse(): RegisterResponse {
  return { ok: false, assignedId: "", message: "" };
}

export const RegisterResponse: MessageFns<RegisterResponse> = {
  encode(message: RegisterResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.ok !== false) {
      writer.uint32(8).bool(message.ok);
    }
    if (message.assignedId !== "") {
      writer.uint32(18).string(message.assignedId);
    }
    if (message.message !== "") {
      writer.uint32(26).string(message.message);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RegisterResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRegisterResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.ok = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.assignedId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.message = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RegisterResponse {
    return {
      ok: isSet(object.ok) ? globalThis.Boolean(object.ok) : false,
      assignedId: isSet(object.assignedId) ? globalThis.String(object.assignedId) : "",
      message: isSet(object.message) ? globalThis.String(object.message) : "",
    };
  },

  toJSON(message: RegisterResponse): unknown {
    const obj: any = {};
    if (message.ok !== false) {
      obj.ok = message.ok;
    }
    if (message.assignedId !== "") {
      obj.assignedId = message.assignedId;
    }
    if (message.message !== "") {
      obj.message = message.message;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RegisterResponse>, I>>(base?: I): RegisterResponse {
    return RegisterResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RegisterResponse>, I>>(object: I): RegisterResponse {
    const message = createBaseRegisterResponse();
    message.ok = object.ok ?? false;
    message.assignedId = object.assignedId ?? "";
    message.message = object.message ?? "";
    return message;
  },
};

function createBaseHeartbeatRequest(): HeartbeatRequest {
  return { agent: undefined };
}

export const HeartbeatRequest: MessageFns<HeartbeatRequest> = {
  encode(message: HeartbeatRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.agent !== undefined) {
      AgentInfo.encode(message.agent, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HeartbeatRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHeartbeatRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.agent = AgentInfo.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HeartbeatRequest {
    return { agent: isSet(object.agent) ? AgentInfo.fromJSON(object.agent) : undefined };
  },

  toJSON(message: HeartbeatRequest): unknown {
    const obj: any = {};
    if (message.agent !== undefined) {
      obj.agent = AgentInfo.toJSON(message.agent);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<HeartbeatRequest>, I>>(base?: I): HeartbeatRequest {
    return HeartbeatRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<HeartbeatRequest>, I>>(object: I): HeartbeatRequest {
    const message = createBaseHeartbeatRequest();
    message.agent = (object.agent !== undefined && object.agent !== null)
      ? AgentInfo.fromPartial(object.agent)
      : undefined;
    return message;
  },
};

function createBaseHeartbeatResponse(): HeartbeatResponse {
  return { commands: [] };
}

export const HeartbeatResponse: MessageFns<HeartbeatResponse> = {
  encode(message: HeartbeatResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.commands) {
      writer.uint32(10).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HeartbeatResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHeartbeatResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.commands.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HeartbeatResponse {
    return {
      commands: globalThis.Array.isArray(object?.commands) ? object.commands.map((e: any) => globalThis.String(e)) : [],
    };
  },

  toJSON(message: HeartbeatResponse): unknown {
    const obj: any = {};
    if (message.commands?.length) {
      obj.commands = message.commands;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<HeartbeatResponse>, I>>(base?: I): HeartbeatResponse {
    return HeartbeatResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<HeartbeatResponse>, I>>(object: I): HeartbeatResponse {
    const message = createBaseHeartbeatResponse();
    message.commands = object.commands?.map((e) => e) || [];
    return message;
  },
};

function createBaseAssignResponse(): AssignResponse {
  return { accepted: false, assignedAgentId: "", message: "" };
}

export const AssignResponse: MessageFns<AssignResponse> = {
  encode(message: AssignResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.accepted !== false) {
      writer.uint32(8).bool(message.accepted);
    }
    if (message.assignedAgentId !== "") {
      writer.uint32(18).string(message.assignedAgentId);
    }
    if (message.message !== "") {
      writer.uint32(26).string(message.message);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AssignResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAssignResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.accepted = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.assignedAgentId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.message = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AssignResponse {
    return {
      accepted: isSet(object.accepted) ? globalThis.Boolean(object.accepted) : false,
      assignedAgentId: isSet(object.assignedAgentId) ? globalThis.String(object.assignedAgentId) : "",
      message: isSet(object.message) ? globalThis.String(object.message) : "",
    };
  },

  toJSON(message: AssignResponse): unknown {
    const obj: any = {};
    if (message.accepted !== false) {
      obj.accepted = message.accepted;
    }
    if (message.assignedAgentId !== "") {
      obj.assignedAgentId = message.assignedAgentId;
    }
    if (message.message !== "") {
      obj.message = message.message;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AssignResponse>, I>>(base?: I): AssignResponse {
    return AssignResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AssignResponse>, I>>(object: I): AssignResponse {
    const message = createBaseAssignResponse();
    message.accepted = object.accepted ?? false;
    message.assignedAgentId = object.assignedAgentId ?? "";
    message.message = object.message ?? "";
    return message;
  },
};

function createBaseAgentList(): AgentList {
  return { agents: [] };
}

export const AgentList: MessageFns<AgentList> = {
  encode(message: AgentList, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.agents) {
      AgentInfo.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AgentList {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAgentList();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.agents.push(AgentInfo.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AgentList {
    return {
      agents: globalThis.Array.isArray(object?.agents) ? object.agents.map((e: any) => AgentInfo.fromJSON(e)) : [],
    };
  },

  toJSON(message: AgentList): unknown {
    const obj: any = {};
    if (message.agents?.length) {
      obj.agents = message.agents.map((e) => AgentInfo.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AgentList>, I>>(base?: I): AgentList {
    return AgentList.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AgentList>, I>>(object: I): AgentList {
    const message = createBaseAgentList();
    message.agents = object.agents?.map((e) => AgentInfo.fromPartial(e)) || [];
    return message;
  },
};

function createBaseTaskProgressRequest(): TaskProgressRequest {
  return { taskId: "", agentId: "" };
}

export const TaskProgressRequest: MessageFns<TaskProgressRequest> = {
  encode(message: TaskProgressRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.taskId !== "") {
      writer.uint32(10).string(message.taskId);
    }
    if (message.agentId !== "") {
      writer.uint32(18).string(message.agentId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TaskProgressRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTaskProgressRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.taskId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.agentId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TaskProgressRequest {
    return {
      taskId: isSet(object.taskId) ? globalThis.String(object.taskId) : "",
      agentId: isSet(object.agentId) ? globalThis.String(object.agentId) : "",
    };
  },

  toJSON(message: TaskProgressRequest): unknown {
    const obj: any = {};
    if (message.taskId !== "") {
      obj.taskId = message.taskId;
    }
    if (message.agentId !== "") {
      obj.agentId = message.agentId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TaskProgressRequest>, I>>(base?: I): TaskProgressRequest {
    return TaskProgressRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TaskProgressRequest>, I>>(object: I): TaskProgressRequest {
    const message = createBaseTaskProgressRequest();
    message.taskId = object.taskId ?? "";
    message.agentId = object.agentId ?? "";
    return message;
  },
};

export type AgentManagerService = typeof AgentManagerService;
export const AgentManagerService = {
  /** Agents call this to register themselves with MCP */
  registerAgent: {
    path: "/genai.manager.AgentManager/RegisterAgent",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: AgentInfo): Buffer => Buffer.from(AgentInfo.encode(value).finish()),
    requestDeserialize: (value: Buffer): AgentInfo => AgentInfo.decode(value),
    responseSerialize: (value: RegisterResponse): Buffer => Buffer.from(RegisterResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): RegisterResponse => RegisterResponse.decode(value),
  },
  /** Agents call periodically to keep alive; server responds with any commands */
  heartbeat: {
    path: "/genai.manager.AgentManager/Heartbeat",
    requestStream: true,
    responseStream: true,
    requestSerialize: (value: HeartbeatRequest): Buffer => Buffer.from(HeartbeatRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): HeartbeatRequest => HeartbeatRequest.decode(value),
    responseSerialize: (value: HeartbeatResponse): Buffer => Buffer.from(HeartbeatResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): HeartbeatResponse => HeartbeatResponse.decode(value),
  },
  /** Submit a task to a matched agent (MCP can route to correct agent) */
  assignTask: {
    path: "/genai.manager.AgentManager/AssignTask",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: TaskRequest): Buffer => Buffer.from(TaskRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): TaskRequest => TaskRequest.decode(value),
    responseSerialize: (value: AssignResponse): Buffer => Buffer.from(AssignResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): AssignResponse => AssignResponse.decode(value),
  },
  /** Query agent list & statuses */
  listAgents: {
    path: "/genai.manager.AgentManager/ListAgents",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: Empty): Buffer => Buffer.from(Empty.encode(value).finish()),
    requestDeserialize: (value: Buffer): Empty => Empty.decode(value),
    responseSerialize: (value: AgentList): Buffer => Buffer.from(AgentList.encode(value).finish()),
    responseDeserialize: (value: Buffer): AgentList => AgentList.decode(value),
  },
  /** Stream task progress updates (server -> client) */
  streamProgress: {
    path: "/genai.manager.AgentManager/StreamProgress",
    requestStream: false,
    responseStream: true,
    requestSerialize: (value: TaskProgressRequest): Buffer => Buffer.from(TaskProgressRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): TaskProgressRequest => TaskProgressRequest.decode(value),
    responseSerialize: (value: ProgressUpdate): Buffer => Buffer.from(ProgressUpdate.encode(value).finish()),
    responseDeserialize: (value: Buffer): ProgressUpdate => ProgressUpdate.decode(value),
  },
} as const;

export interface AgentManagerServer extends UntypedServiceImplementation {
  /** Agents call this to register themselves with MCP */
  registerAgent: handleUnaryCall<AgentInfo, RegisterResponse>;
  /** Agents call periodically to keep alive; server responds with any commands */
  heartbeat: handleBidiStreamingCall<HeartbeatRequest, HeartbeatResponse>;
  /** Submit a task to a matched agent (MCP can route to correct agent) */
  assignTask: handleUnaryCall<TaskRequest, AssignResponse>;
  /** Query agent list & statuses */
  listAgents: handleUnaryCall<Empty, AgentList>;
  /** Stream task progress updates (server -> client) */
  streamProgress: handleServerStreamingCall<TaskProgressRequest, ProgressUpdate>;
}

export interface AgentManagerClient extends Client {
  /** Agents call this to register themselves with MCP */
  registerAgent(
    request: AgentInfo,
    callback: (error: ServiceError | null, response: RegisterResponse) => void,
  ): ClientUnaryCall;
  registerAgent(
    request: AgentInfo,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: RegisterResponse) => void,
  ): ClientUnaryCall;
  registerAgent(
    request: AgentInfo,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: RegisterResponse) => void,
  ): ClientUnaryCall;
  /** Agents call periodically to keep alive; server responds with any commands */
  heartbeat(): ClientDuplexStream<HeartbeatRequest, HeartbeatResponse>;
  heartbeat(options: Partial<CallOptions>): ClientDuplexStream<HeartbeatRequest, HeartbeatResponse>;
  heartbeat(
    metadata: Metadata,
    options?: Partial<CallOptions>,
  ): ClientDuplexStream<HeartbeatRequest, HeartbeatResponse>;
  /** Submit a task to a matched agent (MCP can route to correct agent) */
  assignTask(
    request: TaskRequest,
    callback: (error: ServiceError | null, response: AssignResponse) => void,
  ): ClientUnaryCall;
  assignTask(
    request: TaskRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: AssignResponse) => void,
  ): ClientUnaryCall;
  assignTask(
    request: TaskRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: AssignResponse) => void,
  ): ClientUnaryCall;
  /** Query agent list & statuses */
  listAgents(request: Empty, callback: (error: ServiceError | null, response: AgentList) => void): ClientUnaryCall;
  listAgents(
    request: Empty,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: AgentList) => void,
  ): ClientUnaryCall;
  listAgents(
    request: Empty,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: AgentList) => void,
  ): ClientUnaryCall;
  /** Stream task progress updates (server -> client) */
  streamProgress(request: TaskProgressRequest, options?: Partial<CallOptions>): ClientReadableStream<ProgressUpdate>;
  streamProgress(
    request: TaskProgressRequest,
    metadata?: Metadata,
    options?: Partial<CallOptions>,
  ): ClientReadableStream<ProgressUpdate>;
}

export const AgentManagerClient = makeGenericClientConstructor(
  AgentManagerService,
  "genai.manager.AgentManager",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): AgentManagerClient;
  service: typeof AgentManagerService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
