// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.8.0
//   protoc               v6.33.0
// source: common.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Timestamp } from "./google/protobuf/timestamp";

export const protobufPackage = "genai.common";

export enum AgentType {
  AGENT_UNSPECIFIED = 0,
  AGENT_TRANSCRIPTION = 1,
  AGENT_VISION = 2,
  AGENT_GENERATION = 3,
  AGENT_CUSTOM = 100,
  UNRECOGNIZED = -1,
}

export function agentTypeFromJSON(object: any): AgentType {
  switch (object) {
    case 0:
    case "AGENT_UNSPECIFIED":
      return AgentType.AGENT_UNSPECIFIED;
    case 1:
    case "AGENT_TRANSCRIPTION":
      return AgentType.AGENT_TRANSCRIPTION;
    case 2:
    case "AGENT_VISION":
      return AgentType.AGENT_VISION;
    case 3:
    case "AGENT_GENERATION":
      return AgentType.AGENT_GENERATION;
    case 100:
    case "AGENT_CUSTOM":
      return AgentType.AGENT_CUSTOM;
    case -1:
    case "UNRECOGNIZED":
    default:
      return AgentType.UNRECOGNIZED;
  }
}

export function agentTypeToJSON(object: AgentType): string {
  switch (object) {
    case AgentType.AGENT_UNSPECIFIED:
      return "AGENT_UNSPECIFIED";
    case AgentType.AGENT_TRANSCRIPTION:
      return "AGENT_TRANSCRIPTION";
    case AgentType.AGENT_VISION:
      return "AGENT_VISION";
    case AgentType.AGENT_GENERATION:
      return "AGENT_GENERATION";
    case AgentType.AGENT_CUSTOM:
      return "AGENT_CUSTOM";
    case AgentType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum TaskStatus {
  TASK_UNKNOWN = 0,
  TASK_QUEUED = 1,
  TASK_RUNNING = 2,
  TASK_SUCCEEDED = 3,
  TASK_FAILED = 4,
  TASK_CANCELLED = 5,
  UNRECOGNIZED = -1,
}

export function taskStatusFromJSON(object: any): TaskStatus {
  switch (object) {
    case 0:
    case "TASK_UNKNOWN":
      return TaskStatus.TASK_UNKNOWN;
    case 1:
    case "TASK_QUEUED":
      return TaskStatus.TASK_QUEUED;
    case 2:
    case "TASK_RUNNING":
      return TaskStatus.TASK_RUNNING;
    case 3:
    case "TASK_SUCCEEDED":
      return TaskStatus.TASK_SUCCEEDED;
    case 4:
    case "TASK_FAILED":
      return TaskStatus.TASK_FAILED;
    case 5:
    case "TASK_CANCELLED":
      return TaskStatus.TASK_CANCELLED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return TaskStatus.UNRECOGNIZED;
  }
}

export function taskStatusToJSON(object: TaskStatus): string {
  switch (object) {
    case TaskStatus.TASK_UNKNOWN:
      return "TASK_UNKNOWN";
    case TaskStatus.TASK_QUEUED:
      return "TASK_QUEUED";
    case TaskStatus.TASK_RUNNING:
      return "TASK_RUNNING";
    case TaskStatus.TASK_SUCCEEDED:
      return "TASK_SUCCEEDED";
    case TaskStatus.TASK_FAILED:
      return "TASK_FAILED";
    case TaskStatus.TASK_CANCELLED:
      return "TASK_CANCELLED";
    case TaskStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface AgentInfo {
  /** unique agent id (uuid) */
  id: string;
  name: string;
  type: AgentType;
  version: string;
  /** comma-separated or JSON describing models supported */
  capabilities: string;
  lastSeen?: Date | undefined;
}

export interface FileRef {
  /** local filesystem path (app should validate) */
  uri: string;
  mime: string;
  sizeBytes: number;
}

export interface TaskRequest {
  taskId: string;
  /** optional: "transcription", "vision", "generation" */
  agentTypeHint: string;
  /** pointer to input file or artifact */
  input?:
    | FileRef
    | undefined;
  /** optional params (model, thresholds) as JSON string */
  parametersJson: string;
  createdAt?: Date | undefined;
}

export interface ProgressUpdate {
  taskId: string;
  status: TaskStatus;
  percent: number;
  /** human-readable status */
  message: string;
  updatedAt?: Date | undefined;
}

export interface TaskResult {
  taskId: string;
  success: boolean;
  /** file path for generated artifact(s) or JSON blob path */
  outputUri: string;
  /** textual result or metadata (e.g., transcript JSON) */
  resultJson: string;
  errorMessage: string;
  completedAt?: Date | undefined;
}

export interface Empty {
}

function createBaseAgentInfo(): AgentInfo {
  return { id: "", name: "", type: 0, version: "", capabilities: "", lastSeen: undefined };
}

export const AgentInfo: MessageFns<AgentInfo> = {
  encode(message: AgentInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.type !== 0) {
      writer.uint32(24).int32(message.type);
    }
    if (message.version !== "") {
      writer.uint32(34).string(message.version);
    }
    if (message.capabilities !== "") {
      writer.uint32(42).string(message.capabilities);
    }
    if (message.lastSeen !== undefined) {
      Timestamp.encode(toTimestamp(message.lastSeen), writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AgentInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAgentInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.version = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.capabilities = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.lastSeen = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AgentInfo {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      type: isSet(object.type) ? agentTypeFromJSON(object.type) : 0,
      version: isSet(object.version) ? globalThis.String(object.version) : "",
      capabilities: isSet(object.capabilities) ? globalThis.String(object.capabilities) : "",
      lastSeen: isSet(object.lastSeen) ? fromJsonTimestamp(object.lastSeen) : undefined,
    };
  },

  toJSON(message: AgentInfo): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.type !== 0) {
      obj.type = agentTypeToJSON(message.type);
    }
    if (message.version !== "") {
      obj.version = message.version;
    }
    if (message.capabilities !== "") {
      obj.capabilities = message.capabilities;
    }
    if (message.lastSeen !== undefined) {
      obj.lastSeen = message.lastSeen.toISOString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AgentInfo>, I>>(base?: I): AgentInfo {
    return AgentInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AgentInfo>, I>>(object: I): AgentInfo {
    const message = createBaseAgentInfo();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.type = object.type ?? 0;
    message.version = object.version ?? "";
    message.capabilities = object.capabilities ?? "";
    message.lastSeen = object.lastSeen ?? undefined;
    return message;
  },
};

function createBaseFileRef(): FileRef {
  return { uri: "", mime: "", sizeBytes: 0 };
}

export const FileRef: MessageFns<FileRef> = {
  encode(message: FileRef, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.uri !== "") {
      writer.uint32(10).string(message.uri);
    }
    if (message.mime !== "") {
      writer.uint32(18).string(message.mime);
    }
    if (message.sizeBytes !== 0) {
      writer.uint32(24).int64(message.sizeBytes);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FileRef {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFileRef();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.uri = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.mime = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.sizeBytes = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FileRef {
    return {
      uri: isSet(object.uri) ? globalThis.String(object.uri) : "",
      mime: isSet(object.mime) ? globalThis.String(object.mime) : "",
      sizeBytes: isSet(object.sizeBytes) ? globalThis.Number(object.sizeBytes) : 0,
    };
  },

  toJSON(message: FileRef): unknown {
    const obj: any = {};
    if (message.uri !== "") {
      obj.uri = message.uri;
    }
    if (message.mime !== "") {
      obj.mime = message.mime;
    }
    if (message.sizeBytes !== 0) {
      obj.sizeBytes = Math.round(message.sizeBytes);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FileRef>, I>>(base?: I): FileRef {
    return FileRef.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FileRef>, I>>(object: I): FileRef {
    const message = createBaseFileRef();
    message.uri = object.uri ?? "";
    message.mime = object.mime ?? "";
    message.sizeBytes = object.sizeBytes ?? 0;
    return message;
  },
};

function createBaseTaskRequest(): TaskRequest {
  return { taskId: "", agentTypeHint: "", input: undefined, parametersJson: "", createdAt: undefined };
}

export const TaskRequest: MessageFns<TaskRequest> = {
  encode(message: TaskRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.taskId !== "") {
      writer.uint32(10).string(message.taskId);
    }
    if (message.agentTypeHint !== "") {
      writer.uint32(18).string(message.agentTypeHint);
    }
    if (message.input !== undefined) {
      FileRef.encode(message.input, writer.uint32(26).fork()).join();
    }
    if (message.parametersJson !== "") {
      writer.uint32(34).string(message.parametersJson);
    }
    if (message.createdAt !== undefined) {
      Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TaskRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTaskRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.taskId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.agentTypeHint = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.input = FileRef.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.parametersJson = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.createdAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TaskRequest {
    return {
      taskId: isSet(object.taskId) ? globalThis.String(object.taskId) : "",
      agentTypeHint: isSet(object.agentTypeHint) ? globalThis.String(object.agentTypeHint) : "",
      input: isSet(object.input) ? FileRef.fromJSON(object.input) : undefined,
      parametersJson: isSet(object.parametersJson) ? globalThis.String(object.parametersJson) : "",
      createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
    };
  },

  toJSON(message: TaskRequest): unknown {
    const obj: any = {};
    if (message.taskId !== "") {
      obj.taskId = message.taskId;
    }
    if (message.agentTypeHint !== "") {
      obj.agentTypeHint = message.agentTypeHint;
    }
    if (message.input !== undefined) {
      obj.input = FileRef.toJSON(message.input);
    }
    if (message.parametersJson !== "") {
      obj.parametersJson = message.parametersJson;
    }
    if (message.createdAt !== undefined) {
      obj.createdAt = message.createdAt.toISOString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TaskRequest>, I>>(base?: I): TaskRequest {
    return TaskRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TaskRequest>, I>>(object: I): TaskRequest {
    const message = createBaseTaskRequest();
    message.taskId = object.taskId ?? "";
    message.agentTypeHint = object.agentTypeHint ?? "";
    message.input = (object.input !== undefined && object.input !== null)
      ? FileRef.fromPartial(object.input)
      : undefined;
    message.parametersJson = object.parametersJson ?? "";
    message.createdAt = object.createdAt ?? undefined;
    return message;
  },
};

function createBaseProgressUpdate(): ProgressUpdate {
  return { taskId: "", status: 0, percent: 0, message: "", updatedAt: undefined };
}

export const ProgressUpdate: MessageFns<ProgressUpdate> = {
  encode(message: ProgressUpdate, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.taskId !== "") {
      writer.uint32(10).string(message.taskId);
    }
    if (message.status !== 0) {
      writer.uint32(16).int32(message.status);
    }
    if (message.percent !== 0) {
      writer.uint32(24).int32(message.percent);
    }
    if (message.message !== "") {
      writer.uint32(34).string(message.message);
    }
    if (message.updatedAt !== undefined) {
      Timestamp.encode(toTimestamp(message.updatedAt), writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProgressUpdate {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProgressUpdate();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.taskId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.percent = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.message = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.updatedAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProgressUpdate {
    return {
      taskId: isSet(object.taskId) ? globalThis.String(object.taskId) : "",
      status: isSet(object.status) ? taskStatusFromJSON(object.status) : 0,
      percent: isSet(object.percent) ? globalThis.Number(object.percent) : 0,
      message: isSet(object.message) ? globalThis.String(object.message) : "",
      updatedAt: isSet(object.updatedAt) ? fromJsonTimestamp(object.updatedAt) : undefined,
    };
  },

  toJSON(message: ProgressUpdate): unknown {
    const obj: any = {};
    if (message.taskId !== "") {
      obj.taskId = message.taskId;
    }
    if (message.status !== 0) {
      obj.status = taskStatusToJSON(message.status);
    }
    if (message.percent !== 0) {
      obj.percent = Math.round(message.percent);
    }
    if (message.message !== "") {
      obj.message = message.message;
    }
    if (message.updatedAt !== undefined) {
      obj.updatedAt = message.updatedAt.toISOString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ProgressUpdate>, I>>(base?: I): ProgressUpdate {
    return ProgressUpdate.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ProgressUpdate>, I>>(object: I): ProgressUpdate {
    const message = createBaseProgressUpdate();
    message.taskId = object.taskId ?? "";
    message.status = object.status ?? 0;
    message.percent = object.percent ?? 0;
    message.message = object.message ?? "";
    message.updatedAt = object.updatedAt ?? undefined;
    return message;
  },
};

function createBaseTaskResult(): TaskResult {
  return { taskId: "", success: false, outputUri: "", resultJson: "", errorMessage: "", completedAt: undefined };
}

export const TaskResult: MessageFns<TaskResult> = {
  encode(message: TaskResult, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.taskId !== "") {
      writer.uint32(10).string(message.taskId);
    }
    if (message.success !== false) {
      writer.uint32(16).bool(message.success);
    }
    if (message.outputUri !== "") {
      writer.uint32(26).string(message.outputUri);
    }
    if (message.resultJson !== "") {
      writer.uint32(34).string(message.resultJson);
    }
    if (message.errorMessage !== "") {
      writer.uint32(42).string(message.errorMessage);
    }
    if (message.completedAt !== undefined) {
      Timestamp.encode(toTimestamp(message.completedAt), writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TaskResult {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTaskResult();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.taskId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.outputUri = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.resultJson = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.errorMessage = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.completedAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TaskResult {
    return {
      taskId: isSet(object.taskId) ? globalThis.String(object.taskId) : "",
      success: isSet(object.success) ? globalThis.Boolean(object.success) : false,
      outputUri: isSet(object.outputUri) ? globalThis.String(object.outputUri) : "",
      resultJson: isSet(object.resultJson) ? globalThis.String(object.resultJson) : "",
      errorMessage: isSet(object.errorMessage) ? globalThis.String(object.errorMessage) : "",
      completedAt: isSet(object.completedAt) ? fromJsonTimestamp(object.completedAt) : undefined,
    };
  },

  toJSON(message: TaskResult): unknown {
    const obj: any = {};
    if (message.taskId !== "") {
      obj.taskId = message.taskId;
    }
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.outputUri !== "") {
      obj.outputUri = message.outputUri;
    }
    if (message.resultJson !== "") {
      obj.resultJson = message.resultJson;
    }
    if (message.errorMessage !== "") {
      obj.errorMessage = message.errorMessage;
    }
    if (message.completedAt !== undefined) {
      obj.completedAt = message.completedAt.toISOString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TaskResult>, I>>(base?: I): TaskResult {
    return TaskResult.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TaskResult>, I>>(object: I): TaskResult {
    const message = createBaseTaskResult();
    message.taskId = object.taskId ?? "";
    message.success = object.success ?? false;
    message.outputUri = object.outputUri ?? "";
    message.resultJson = object.resultJson ?? "";
    message.errorMessage = object.errorMessage ?? "";
    message.completedAt = object.completedAt ?? undefined;
    return message;
  },
};

function createBaseEmpty(): Empty {
  return {};
}

export const Empty: MessageFns<Empty> = {
  encode(_: Empty, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Empty {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEmpty();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): Empty {
    return {};
  },

  toJSON(_: Empty): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<Empty>, I>>(base?: I): Empty {
    return Empty.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Empty>, I>>(_: I): Empty {
    const message = createBaseEmpty();
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
