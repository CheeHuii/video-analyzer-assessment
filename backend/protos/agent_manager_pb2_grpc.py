# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import agent_manager_pb2 as agent__manager__pb2
import common_pb2 as common__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2

GRPC_GENERATED_VERSION = '1.76.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + ' but the generated code in agent_manager_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class AgentManagerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RegisterAgent = channel.unary_unary(
                '/genai.manager.AgentManager/RegisterAgent',
                request_serializer=common__pb2.AgentInfo.SerializeToString,
                response_deserializer=agent__manager__pb2.RegisterResponse.FromString,
                _registered_method=True)
        self.Heartbeat = channel.stream_stream(
                '/genai.manager.AgentManager/Heartbeat',
                request_serializer=agent__manager__pb2.HeartbeatRequest.SerializeToString,
                response_deserializer=agent__manager__pb2.HeartbeatResponse.FromString,
                _registered_method=True)
        self.AssignTask = channel.unary_unary(
                '/genai.manager.AgentManager/AssignTask',
                request_serializer=common__pb2.TaskRequest.SerializeToString,
                response_deserializer=agent__manager__pb2.AssignResponse.FromString,
                _registered_method=True)
        self.ListAgents = channel.unary_unary(
                '/genai.manager.AgentManager/ListAgents',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=agent__manager__pb2.AgentList.FromString,
                _registered_method=True)
        self.StreamProgress = channel.unary_stream(
                '/genai.manager.AgentManager/StreamProgress',
                request_serializer=agent__manager__pb2.TaskProgressRequest.SerializeToString,
                response_deserializer=common__pb2.ProgressUpdate.FromString,
                _registered_method=True)


class AgentManagerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def RegisterAgent(self, request, context):
        """Agents call this to register themselves with MCP
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Heartbeat(self, request_iterator, context):
        """Agents call periodically to keep alive; server responds with any commands
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AssignTask(self, request, context):
        """Submit a task to a matched agent (MCP can route to correct agent)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListAgents(self, request, context):
        """Query agent list & statuses
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamProgress(self, request, context):
        """Stream task progress updates (server -> client)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AgentManagerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RegisterAgent': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterAgent,
                    request_deserializer=common__pb2.AgentInfo.FromString,
                    response_serializer=agent__manager__pb2.RegisterResponse.SerializeToString,
            ),
            'Heartbeat': grpc.stream_stream_rpc_method_handler(
                    servicer.Heartbeat,
                    request_deserializer=agent__manager__pb2.HeartbeatRequest.FromString,
                    response_serializer=agent__manager__pb2.HeartbeatResponse.SerializeToString,
            ),
            'AssignTask': grpc.unary_unary_rpc_method_handler(
                    servicer.AssignTask,
                    request_deserializer=common__pb2.TaskRequest.FromString,
                    response_serializer=agent__manager__pb2.AssignResponse.SerializeToString,
            ),
            'ListAgents': grpc.unary_unary_rpc_method_handler(
                    servicer.ListAgents,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=agent__manager__pb2.AgentList.SerializeToString,
            ),
            'StreamProgress': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamProgress,
                    request_deserializer=agent__manager__pb2.TaskProgressRequest.FromString,
                    response_serializer=common__pb2.ProgressUpdate.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'genai.manager.AgentManager', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('genai.manager.AgentManager', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class AgentManager(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def RegisterAgent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/genai.manager.AgentManager/RegisterAgent',
            common__pb2.AgentInfo.SerializeToString,
            agent__manager__pb2.RegisterResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Heartbeat(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            '/genai.manager.AgentManager/Heartbeat',
            agent__manager__pb2.HeartbeatRequest.SerializeToString,
            agent__manager__pb2.HeartbeatResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AssignTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/genai.manager.AgentManager/AssignTask',
            common__pb2.TaskRequest.SerializeToString,
            agent__manager__pb2.AssignResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListAgents(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/genai.manager.AgentManager/ListAgents',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            agent__manager__pb2.AgentList.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StreamProgress(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/genai.manager.AgentManager/StreamProgress',
            agent__manager__pb2.TaskProgressRequest.SerializeToString,
            common__pb2.ProgressUpdate.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
